import rateLimit from 'express-rate-limit';

/**
 * Middleware de rate limiting que √© desativado automaticamente em ambiente de desenvolvimento
 * @param {Object} options - Op√ß√µes adicionais para o rate limiter
 * @returns {Function} Middleware de rate limiting configurado
 */
export const configureRateLimit = (options = {}) => {
  const isDev = process.env.NODE_ENV !== 'production';
  
  // Se estiver em ambiente de desenvolvimento e n√£o for explicitamente for√ßado
  if (isDev && !options.forceInDev) {
    console.log('üîì Rate limiting desativado em ambiente de desenvolvimento');
    
    // Retorna um middleware que apenas passa para o pr√≥ximo
    return (req, res, next) => next();
  }
  
  // Configura√ß√£o padr√£o para produ√ß√£o
  const defaultOptions = {
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 100, // limite de 100 requisi√ß√µes por IP
    standardHeaders: true, // Retorna os headers padr√£o de rate limit
    legacyHeaders: false, // Desabilita os headers antigos
    message: 'Muitas requisi√ß√µes, por favor tente novamente mais tarde.',
  };
  
  // Combina as op√ß√µes padr√£o com as op√ß√µes personalizadas
  const limiterOptions = {
    ...defaultOptions,
    ...options,
  };
  
  console.log('üîí Rate limiting ativado com configura√ß√£o:', limiterOptions);
  
  // Retorna o middleware configurado
  return rateLimit(limiterOptions);
};

/**
 * Configura√ß√£o de rate limiting para autentica√ß√£o
 */
export const authLimiter = configureRateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 10, // limite ainda mais restrito para tentativas de login
  message: 'Muitas tentativas de login, tente novamente mais tarde.',
}); 